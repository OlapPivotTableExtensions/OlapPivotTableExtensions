//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5446.
// 
#pragma warning disable 1591

namespace OlapPivotTableExtensions.com.msftlabs.formatmdx {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FormatterSoap", Namespace="http://formatmdx.msftlabs.com/")]
    public partial class Formatter : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FormatAsPlainTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormatAsPlainTextWithSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormatAsHtmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormatAsHtmlWithSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormatAsRtfOperationCompleted;
        
        private System.Threading.SendOrPostCallback FormatAsRtfWithSettingsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Formatter() {
            this.Url = "http://formatmdx.msftlabs.com/formatter.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FormatAsPlainTextCompletedEventHandler FormatAsPlainTextCompleted;
        
        /// <remarks/>
        public event FormatAsPlainTextWithSettingsCompletedEventHandler FormatAsPlainTextWithSettingsCompleted;
        
        /// <remarks/>
        public event FormatAsHtmlCompletedEventHandler FormatAsHtmlCompleted;
        
        /// <remarks/>
        public event FormatAsHtmlWithSettingsCompletedEventHandler FormatAsHtmlWithSettingsCompleted;
        
        /// <remarks/>
        public event FormatAsRtfCompletedEventHandler FormatAsRtfCompleted;
        
        /// <remarks/>
        public event FormatAsRtfWithSettingsCompletedEventHandler FormatAsRtfWithSettingsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://formatmdx.msftlabs.com/FormatAsPlainText", RequestNamespace="http://formatmdx.msftlabs.com/", ResponseNamespace="http://formatmdx.msftlabs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FormatAsPlainText(string queryText) {
            object[] results = this.Invoke("FormatAsPlainText", new object[] {
                        queryText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FormatAsPlainTextAsync(string queryText) {
            this.FormatAsPlainTextAsync(queryText, null);
        }
        
        /// <remarks/>
        public void FormatAsPlainTextAsync(string queryText, object userState) {
            if ((this.FormatAsPlainTextOperationCompleted == null)) {
                this.FormatAsPlainTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormatAsPlainTextOperationCompleted);
            }
            this.InvokeAsync("FormatAsPlainText", new object[] {
                        queryText}, this.FormatAsPlainTextOperationCompleted, userState);
        }
        
        private void OnFormatAsPlainTextOperationCompleted(object arg) {
            if ((this.FormatAsPlainTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormatAsPlainTextCompleted(this, new FormatAsPlainTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://formatmdx.msftlabs.com/FormatAsPlainTextWithSettings", RequestNamespace="http://formatmdx.msftlabs.com/", ResponseNamespace="http://formatmdx.msftlabs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FormatAsPlainTextWithSettings(string queryText, Settings setting) {
            object[] results = this.Invoke("FormatAsPlainTextWithSettings", new object[] {
                        queryText,
                        setting});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FormatAsPlainTextWithSettingsAsync(string queryText, Settings setting) {
            this.FormatAsPlainTextWithSettingsAsync(queryText, setting, null);
        }
        
        /// <remarks/>
        public void FormatAsPlainTextWithSettingsAsync(string queryText, Settings setting, object userState) {
            if ((this.FormatAsPlainTextWithSettingsOperationCompleted == null)) {
                this.FormatAsPlainTextWithSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormatAsPlainTextWithSettingsOperationCompleted);
            }
            this.InvokeAsync("FormatAsPlainTextWithSettings", new object[] {
                        queryText,
                        setting}, this.FormatAsPlainTextWithSettingsOperationCompleted, userState);
        }
        
        private void OnFormatAsPlainTextWithSettingsOperationCompleted(object arg) {
            if ((this.FormatAsPlainTextWithSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormatAsPlainTextWithSettingsCompleted(this, new FormatAsPlainTextWithSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://formatmdx.msftlabs.com/FormatAsHtml", RequestNamespace="http://formatmdx.msftlabs.com/", ResponseNamespace="http://formatmdx.msftlabs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FormatAsHtml(string queryText) {
            object[] results = this.Invoke("FormatAsHtml", new object[] {
                        queryText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FormatAsHtmlAsync(string queryText) {
            this.FormatAsHtmlAsync(queryText, null);
        }
        
        /// <remarks/>
        public void FormatAsHtmlAsync(string queryText, object userState) {
            if ((this.FormatAsHtmlOperationCompleted == null)) {
                this.FormatAsHtmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormatAsHtmlOperationCompleted);
            }
            this.InvokeAsync("FormatAsHtml", new object[] {
                        queryText}, this.FormatAsHtmlOperationCompleted, userState);
        }
        
        private void OnFormatAsHtmlOperationCompleted(object arg) {
            if ((this.FormatAsHtmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormatAsHtmlCompleted(this, new FormatAsHtmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://formatmdx.msftlabs.com/FormatAsHtmlWithSettings", RequestNamespace="http://formatmdx.msftlabs.com/", ResponseNamespace="http://formatmdx.msftlabs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FormatAsHtmlWithSettings(string queryText, Settings setting) {
            object[] results = this.Invoke("FormatAsHtmlWithSettings", new object[] {
                        queryText,
                        setting});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FormatAsHtmlWithSettingsAsync(string queryText, Settings setting) {
            this.FormatAsHtmlWithSettingsAsync(queryText, setting, null);
        }
        
        /// <remarks/>
        public void FormatAsHtmlWithSettingsAsync(string queryText, Settings setting, object userState) {
            if ((this.FormatAsHtmlWithSettingsOperationCompleted == null)) {
                this.FormatAsHtmlWithSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormatAsHtmlWithSettingsOperationCompleted);
            }
            this.InvokeAsync("FormatAsHtmlWithSettings", new object[] {
                        queryText,
                        setting}, this.FormatAsHtmlWithSettingsOperationCompleted, userState);
        }
        
        private void OnFormatAsHtmlWithSettingsOperationCompleted(object arg) {
            if ((this.FormatAsHtmlWithSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormatAsHtmlWithSettingsCompleted(this, new FormatAsHtmlWithSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://formatmdx.msftlabs.com/FormatAsRtf", RequestNamespace="http://formatmdx.msftlabs.com/", ResponseNamespace="http://formatmdx.msftlabs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FormatAsRtf(string queryText) {
            object[] results = this.Invoke("FormatAsRtf", new object[] {
                        queryText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FormatAsRtfAsync(string queryText) {
            this.FormatAsRtfAsync(queryText, null);
        }
        
        /// <remarks/>
        public void FormatAsRtfAsync(string queryText, object userState) {
            if ((this.FormatAsRtfOperationCompleted == null)) {
                this.FormatAsRtfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormatAsRtfOperationCompleted);
            }
            this.InvokeAsync("FormatAsRtf", new object[] {
                        queryText}, this.FormatAsRtfOperationCompleted, userState);
        }
        
        private void OnFormatAsRtfOperationCompleted(object arg) {
            if ((this.FormatAsRtfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormatAsRtfCompleted(this, new FormatAsRtfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://formatmdx.msftlabs.com/FormatAsRtfWithSettings", RequestNamespace="http://formatmdx.msftlabs.com/", ResponseNamespace="http://formatmdx.msftlabs.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FormatAsRtfWithSettings(string queryText, Settings setting) {
            object[] results = this.Invoke("FormatAsRtfWithSettings", new object[] {
                        queryText,
                        setting});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FormatAsRtfWithSettingsAsync(string queryText, Settings setting) {
            this.FormatAsRtfWithSettingsAsync(queryText, setting, null);
        }
        
        /// <remarks/>
        public void FormatAsRtfWithSettingsAsync(string queryText, Settings setting, object userState) {
            if ((this.FormatAsRtfWithSettingsOperationCompleted == null)) {
                this.FormatAsRtfWithSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFormatAsRtfWithSettingsOperationCompleted);
            }
            this.InvokeAsync("FormatAsRtfWithSettings", new object[] {
                        queryText,
                        setting}, this.FormatAsRtfWithSettingsOperationCompleted, userState);
        }
        
        private void OnFormatAsRtfWithSettingsOperationCompleted(object arg) {
            if ((this.FormatAsRtfWithSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FormatAsRtfWithSettingsCompleted(this, new FormatAsRtfWithSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }

	//manually added this code to fix the error "The underlying connection was closed: An unexpected error occurred on a send."
	//code from http://forums.asp.net/t/1003135.aspx
 	protected override System.Net.WebRequest GetWebRequest(System.Uri uri)
 	{
 		System.Net.WebRequest request = base.GetWebRequest(uri);

		//cast it to an HttpWebRequest, if it isn't null
		//then the type cast was successful
		System.Net.HttpWebRequest httpRequest = request as System.Net.HttpWebRequest;
		if(httpRequest != null)
		{
			httpRequest.ServicePoint.MaxIdleTime = 0;
			httpRequest.ServicePoint.ConnectionLeaseTimeout = 0;
			httpRequest.ServicePoint.Expect100Continue = false;
			httpRequest.KeepAlive = false;
			httpRequest.ProtocolVersion = System.Net.HttpVersion.Version10;
		}

		return request;
	}


    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://formatmdx.msftlabs.com/")]
    public partial class Settings {
        
        private bool tabAsIdentField;
        
        private int spacesPerIdentField;
        
        private bool adjustCaseField;
        
        private bool openBraceAfterFunctionOrSubselectOnNewLineField;
        
        private CommaPlacementEnum commaPlacementField;
        
        private string casingForTokensField;
        
        /// <remarks/>
        public bool TabAsIdent {
            get {
                return this.tabAsIdentField;
            }
            set {
                this.tabAsIdentField = value;
            }
        }
        
        /// <remarks/>
        public int SpacesPerIdent {
            get {
                return this.spacesPerIdentField;
            }
            set {
                this.spacesPerIdentField = value;
            }
        }
        
        /// <remarks/>
        public bool AdjustCase {
            get {
                return this.adjustCaseField;
            }
            set {
                this.adjustCaseField = value;
            }
        }
        
        /// <remarks/>
        public bool OpenBraceAfterFunctionOrSubselectOnNewLine {
            get {
                return this.openBraceAfterFunctionOrSubselectOnNewLineField;
            }
            set {
                this.openBraceAfterFunctionOrSubselectOnNewLineField = value;
            }
        }
        
        /// <remarks/>
        public CommaPlacementEnum CommaPlacement {
            get {
                return this.commaPlacementField;
            }
            set {
                this.commaPlacementField = value;
            }
        }
        
        /// <remarks/>
        public string CasingForTokens {
            get {
                return this.casingForTokensField;
            }
            set {
                this.casingForTokensField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://formatmdx.msftlabs.com/")]
    public enum CommaPlacementEnum {
        
        /// <remarks/>
        EndOfLine,
        
        /// <remarks/>
        BegginingOfLine,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void FormatAsPlainTextCompletedEventHandler(object sender, FormatAsPlainTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormatAsPlainTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormatAsPlainTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void FormatAsPlainTextWithSettingsCompletedEventHandler(object sender, FormatAsPlainTextWithSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormatAsPlainTextWithSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormatAsPlainTextWithSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void FormatAsHtmlCompletedEventHandler(object sender, FormatAsHtmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormatAsHtmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormatAsHtmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void FormatAsHtmlWithSettingsCompletedEventHandler(object sender, FormatAsHtmlWithSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormatAsHtmlWithSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormatAsHtmlWithSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void FormatAsRtfCompletedEventHandler(object sender, FormatAsRtfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormatAsRtfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormatAsRtfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void FormatAsRtfWithSettingsCompletedEventHandler(object sender, FormatAsRtfWithSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormatAsRtfWithSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FormatAsRtfWithSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591